package com.polytype.migrator.scripts;

import com.polytype.migrator.core.TargetLanguage;
import java.util.*;

/**
 * Generates comprehensive migration guide documentation.
 */
public class MigrationGuide {
    
    private String sourceLanguage;
    private TargetLanguage targetLanguage;
    private Map<String, String> sections;
    private Map<String, String> dependencyMappings;
    private List<String> issues;
    private List<String> recommendations;
    
    public MigrationGuide() {
        this.sections = new LinkedHashMap<>();
        this.dependencyMappings = new HashMap<>();
        this.issues = new ArrayList<>();
        this.recommendations = new ArrayList<>();
    }
    
    public void setSourceLanguage(String sourceLanguage) { this.sourceLanguage = sourceLanguage; }
    public void setTargetLanguage(TargetLanguage targetLanguage) { this.targetLanguage = targetLanguage; }
    
    public void addSection(String title, String content) {
        sections.put(title, content);
    }
    
    public void addDependencyMapping(String source, String target) {
        dependencyMappings.put(source, target);
    }
    
    public void addIssue(String issue) {
        issues.add(issue);
    }
    
    public void addRecommendation(String recommendation) {
        recommendations.add(recommendation);
    }
    
    public String generateMarkdown() {
        StringBuilder md = new StringBuilder();
        
        md.append("# Migration Guide\n\n");
        md.append("Migration from **").append(sourceLanguage).append("** to **").append(targetLanguage).append("**\n\n");
        md.append("*Generated by PolyType Migration Tool*\n\n");
        
        md.append("## Overview\n\n");
        md.append("This guide provides step-by-step instructions for migrating your project from ");
        md.append(sourceLanguage).append(" to ").append(targetLanguage).append(".\n\n");
        
        // Add all sections
        for (Map.Entry<String, String> section : sections.entrySet()) {
            md.append("## ").append(section.getKey()).append("\n\n");
            md.append(section.getValue()).append("\n\n");
        }
        
        // Add dependency mappings if any
        if (!dependencyMappings.isEmpty()) {
            md.append("## Dependency Mapping\n\n");
            md.append("| Source | Target |\n");
            md.append("|--------|--------|\n");
            for (Map.Entry<String, String> mapping : dependencyMappings.entrySet()) {
                md.append("| `").append(mapping.getKey()).append("` | `").append(mapping.getValue()).append("` |\n");
            }
            md.append("\n");
        }
        
        // Add issues if any
        if (!issues.isEmpty()) {
            md.append("## Known Issues\n\n");
            for (String issue : issues) {
                md.append("- ").append(issue).append("\n");
            }
            md.append("\n");
        }
        
        // Add recommendations if any
        if (!recommendations.isEmpty()) {
            md.append("## Recommendations\n\n");
            for (String recommendation : recommendations) {
                md.append("- ").append(recommendation).append("\n");
            }
            md.append("\n");
        }
        
        md.append("## Next Steps\n\n");
        md.append("1. Review the generated code and build configuration\n");
        md.append("2. Test the build process using the provided scripts\n");
        md.append("3. Validate functionality and run tests\n");
        md.append("4. Make any necessary manual adjustments\n");
        md.append("5. Update documentation and deployment scripts\n\n");
        
        md.append("---\n");
        md.append("*This migration guide was generated automatically. Please review all recommendations and test thoroughly.*\n");
        
        return md.toString();
    }
}